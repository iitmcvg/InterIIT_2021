{"version":3,"sources":["components/NavBar.js","views/Home/Home.js","components/Card.js","components/CardGrid.js","routes/App.js","views/Login/Login.js","serviceWorker.js","index.js"],"names":["NavBar","props","useState","isOpen","setIsOpen","style","fontFamily","fontWeight","fontStyle","backgroundColor","Navbar","light","expand","NavbarBrand","href","color","NavbarToggler","onClick","Collapse","navbar","Nav","className","path","name","map","data","key","NavItem","marginLeft","NavLink","Divider","Home","styles","makeStyles","theme","state","record","i","txt","typeWriter","length","document","getElementById","innerHTML","charAt","setTimeout","fontSize","margin","display","height","justifyContent","alignItems","id","React","Component","root","minWidth","rootLeader","title","desc","btn","CardGrid","flexDirection","bottom","hist","createBrowserHistory","routes","component","username","setUsername","password","setPassword","width","textAlign","Container","FormGroup","FormControl","InputLabel","Input","onChange","e","target","value","type","Button","disabled","formdata","FormData","set","axios","post","headers","then","res","substring","alert","window","location","localStorage","setItem","App","history","prop","exact","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39a33301.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {Divider} from '@material-ui/core'\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    NavLink,\n    NavItem,\n    Nav\n} from 'reactstrap';\n\nconst NavBar = (props) => {\n    const [isOpen, setIsOpen] = useState(false)\n    const toggle = () => setIsOpen(!isOpen);\n    const list = () => {\n        return([\n            {path:\"/auth\", name:\"Token\"}\n        ]);\n    }\n    return(\n        <div style={{\n            fontFamily:'Riona Sans,sans-serif',\n            fontWeight: 'bolder',\n            fontStyle: 'italic',\n            backgroundColor: '#047BD5',\n        }}>\n            <Navbar style={{backgroundColor:'inherit'}} light expand=\"md\">\n                <NavbarBrand href=\"/\" style={{color: 'white'}}>Inter-IIT Tech Meet 9.0</NavbarBrand>\n                <NavbarToggler onClick={toggle} />\n                <Collapse isOpen={isOpen} navbar>\n                    <Nav className=\"ml-auto\" navbar>\n                            {\n                                list().map((data,key)=>(\n                                    <NavItem className=\"ml-auto\" key={key} style={{marginLeft:'10px'}}>\n                                        <NavLink href={data.path} style={{color: 'white'}}>{data.name}</NavLink>\n                                    </NavItem>\n                                ))\n                            }\n                    </Nav>\n                </Collapse>\n            </Navbar>\n            <Divider style={{backgroundColor:'black'}}></Divider>\n        </div>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './Home.css';\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            record: false\n        }\n    }\n\n    componentDidMount() {\n        var i = 0;\n        var txt = 'IIT - Madras'; /* The text */\n        var speed = 125; /* The speed/duration of the effect in milliseconds */\n\n        function typeWriter() {\n            if (i < txt.length) {\n                document.getElementById(\"typewriter\").innerHTML += txt.charAt(i);\n                i++;\n                setTimeout(typeWriter, speed);\n            }\n        }\n\n        typeWriter()\n    }\n\n    styles = makeStyles(theme => ({\n\n    }));\n\n    render() {\n        return (\n            <div style={{\n                fontFamily: 'Riona Sans,sans-serif',\n                fontWeight: 'bolder',\n                fontSize: '200%',\n                fontStyle: 'italic',\n                color: '#047BD5',\n                margin: 'auto',\n                display: 'flex',\n                height: '40vh',\n                justifyContent: 'center',\n                alignItems: 'center'\n            }} >\n                <div id=\"typewriter\" />\n            </div>\n        )\n    }\n}\n\nexport default Home","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Card,\n    CardContent,\n    Typography\n} from '@material-ui/core';\n\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 320,\n        margin: '10px',\n        backgroundColor: '#047BD5'\n    },\n    rootLeader: {\n        minWidth: 320,\n        margin: '10px',\n        backgroundColor: 'green'\n    },\n    title: {\n        fontSize: 14,\n        fontFamily: 'Riona Sans,sans-serif',\n        color: 'white'\n    },\n    name: {\n        fontFamily: 'Riona Sans,sans-serif',\n        color: 'white'\n    },\n    desc: {\n        fontFamily: 'Riona Sans,sans-serif',\n        color: 'white'\n    },\n    btn: {\n        fontFamily: 'Riona Sans,sans-serif',\n        color: 'white'\n    }\n});\n\nfunction CardTemplate(props) {\n    const classes = useStyles();\n\n    return (\n        <Card className={props.data.position === \"Leader\" ? classes.rootLeader : classes.root} variant=\"outlined\">\n            <CardContent>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    {props.data.position}\n                </Typography>\n                <Typography className={classes.name} variant=\"h5\" component=\"h2\">\n                    {props.data.name}\n                </Typography>\n                <Typography className={classes.desc} variant=\"body2\" component=\"p\">\n                    {props.data.phone}\n                    <br />\n                </Typography>\n                <Typography className={classes.desc} variant=\"body2\" component=\"p\">\n                    {props.data.link}\n                <br />\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default CardTemplate","import React from 'react'\nimport Card from './Card'\n\nfunction CardGrid() {\n    return (\n        <footer>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center',\n                bottom: '4px'\n            }}>\n            </div>\n        </footer>\n    )\n}\n\nexport default CardGrid","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\n\nimport NavBar from '../components/NavBar'\n\nimport Home from '../views/Home/Home'\nimport CardGrid from '../components/CardGrid';\nimport Login from '../views/Login/Login';\n\nvar hist = createBrowserHistory();\n\nvar routes = [\n    { path: \"/\", component: Home },\n    { path: \"/auth\", component: Login}\n];\n\nexport default class App extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <NavBar />\n                <Router history={hist}>\n                    <Switch>\n                        {\n                            routes.map((prop, key) => {\n                                return <Route exact path={prop.path} key={key} component={prop.component} />;\n                            })\n                        }\n                    </Switch>\n                </Router>\n                <CardGrid />\n            </div>\n        )\n    }\n}","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport {\n    FormGroup,\n    FormControl,\n    InputLabel,\n    Input,\n    Container,\n    Button\n} from \"@material-ui/core\";\n\nexport default function Login() {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    function handleSubmit() {\n        var btn = document.getElementById('submitbtn')\n        btn.disabled = true\n\n        if (username.length > 0 && password.length > 0) {\n            var formdata = new FormData()\n            formdata.set('username', username)\n            formdata.set('password', password)\n\n            var headers = {\n                headers: {\n                    'Access-Control-Allow-Origin': '*',\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n\n            axios.post('http://localhost:5000/token', formdata, headers)\n                .then((res) => {\n                    var data = res.data\n                    switch (data.substring(0, 3)) {\n                        case '404':\n                        case '405':\n                        case '500':\n                            alert(data)\n                            window.location.href = \"/auth\"\n                            break;\n                        default:\n                            localStorage.setItem('gridToken', data)\n                            alert('Token has been saved')\n                            window.location.href = '/denoise'\n                    }\n                })\n        }\n        else{\n            alert('Empty Username / Password')\n            window.location.href = '/auth'\n        }\n    }\n\n    function handleName(e) {\n        setUsername(e.target.value)\n    }\n    function handlePasswd(e) {\n        setPassword(e.target.value)\n    }\n\n    return (\n        <div style={{ width: '30%', margin: 'auto', textAlign: 'center' }}>\n            <Container>\n                <br />\n                <div style={{\n                    fontFamily: 'Riona Sans,sans-serif',\n                    fontWeight: 'bolder',\n                    fontSize: '200%',\n                    fontStyle: 'italic',\n                    color: '#047BD5',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                }} >\n                    Retrieve your token\n                </div>\n                <br />\n                <form>\n                    <FormGroup>\n                        <FormControl>\n                            <InputLabel>Username</InputLabel>\n                            <Input id=\"input1\" onChange={handleName} />\n                        </FormControl>\n                    </FormGroup>\n                    <br />\n                    <FormGroup>\n                        <FormControl>\n                            <InputLabel>Password</InputLabel>\n                            <Input id=\"input2\" type=\"password\" onChange={handlePasswd} />\n                        </FormControl>\n                    </FormGroup>\n                </form>\n                <br />\n                <Button id=\"submitbtn\" onClick={handleSubmit}>\n                    Login\n                </Button>\n                <br />\n            </Container>\n            <br />\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport App from './routes/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}